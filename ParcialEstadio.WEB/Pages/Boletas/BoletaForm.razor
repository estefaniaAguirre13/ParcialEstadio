@using ParcialEstadio.Shared.Entities;
@using Web.Repositories;
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="Boleta" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="mb-3">
            <label>Entrada:</label>
            <div>
                <select class="form-select" @onchange="OnInitializedAsync">
                    <option value="0">-- Seleccione una porteria --</option>
                    @if (porterias is not null)
                    {
                        @foreach (var porteria in porterias)
                        {
                            <option value="@porteria.Id">@porteria.Name</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Boleta Boleta { get; set; } = null!;


    public Porteria porteria { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }
    private List<Porteria>? porterias;

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPorteriaAsync();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
 
    private async Task LoadPorteriaAsync()
    {
        var responseHttp = await repository.Get<List<Porteria>>($"/api/porteria/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        porterias = responseHttp.Response;
    }
}
