@page "/"
@using ParcialEstadio.Shared.DTOs;
@using ParcialEstadio.Shared.Entities;
@using Web.Repositories;
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<div class="container-fluid d-flex justify-content-center align-items-center flex-column">
    <div class="form-group">
        <h3>Consulta y Registro De Tiquetes</h3>
        <label for="id" class="mt-4">ID Del Tiquete</label>
        <input type="number" class="form-control" id="id" @bind-value="Id" disabled="@campoBloqueado" />
        <button class="btn btn-primary mt-4" type="button" @onclick="Buscar" disabled="@campoBloqueado">Buscar</button>

        @if (boletaDTO != null)
        {
            if (boletaDTO!.Usada == false)
            {
                <div class="container mt-5" style="@visible">
                    <form>
                        <div class="form-group">
                            <label for="fecha">Fecha de Registro</label>
                            <input type="date" class="form-control" id="fecha" @bind="Fecha" />
                        </div>
                        <div class="form-group mt-3">
                            <label for="hora">Hora de Registro</label>
                            <input type="time" class="form-control" id="hora" @bind="Hora" />
                        </div>
                        <div class="mb-3">
                            <label>Entrada:</label>
                            <div>
                                <select class="form-select" @onchange="OnInitializedAsync">
                                    <option value="0">-- Seleccione una porteria --</option>
                                    @if (porterias is not null)
                                    {
                                        @foreach (var porteria in porterias)
                                        {
                                            <option value="@porteria.Id">@porteria.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary mt-4" @onclick="UpdateTicked">Registrar visita</button>
                    </form>
                </div>
            }
        }
    </div>
</div>



@code {
    public BoletaDTO? boletaDTO { get; set; }
    public int Id { get; set; }
    private bool campoBloqueado;
    private string visible = "display: none;";

    public DateTime Fecha { get; set; } = DateTime.Now;
    public TimeOnly Hora { get; set; }
    public Porteria porteria { get; set; } = null!;
    //public Boleta Boletas { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }
    private List<Porteria>? porterias;


    protected override async Task OnInitializedAsync()
    {
        await LoadPorteriaAsync();
    }

    protected async Task Buscar()
    {
        var responseHttp = await repository.Get<BoletaDTO>($"/api/estadio/{Id}");

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        boletaDTO = responseHttp.Response;

        if (boletaDTO!.Usada == true)
        {
            string mensaje = $"<p>El Tiquete Ya fue Registrado en la Porteria : <b>{boletaDTO.PorteriaId}</b></p><p>Fecha de Registro : <b>{boletaDTO.FechaUso}</b></p>";
            await sweetAlertService.FireAsync("Tiquete En Uso", mensaje, SweetAlertIcon.Info);
            return;
        }
        campoBloqueado = true;
        visible = null!;

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 1500
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Tiquete Valido");

    }

    protected async Task UpdateTicked()
    {
        DateTime combinedDateTime = new DateTime(Fecha.Year, Fecha.Month, Fecha.Day, Hora.Hour, Hora.Minute, Hora.Second);

        boletaDTO!.PorteriaId = boletaDTO.PorteriaId;
        boletaDTO.FechaUso = combinedDateTime;
        boletaDTO.Usada = true;



        var responseHttp = await repository.Put("/api/estadio", boletaDTO);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        campoBloqueado = false;
        visible = "display: none;"
        ;
        await sweetAlertService.FireAsync("Registro Exitoso", "El tiquete se ha Registrado Correctamente", SweetAlertIcon.Success);
    }

    private async Task LoadPorteriaAsync()
    {
        var responseHttp = await repository.Get<List<Porteria>>($"/api/porteria/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        porterias = responseHttp.Response;
    }
}